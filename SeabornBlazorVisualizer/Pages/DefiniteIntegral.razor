@page "/definiteintegral"

@using SeabornBlazorVisualizer.Data
@inject MatplotPlotImageService MatplotPlotImageService

<PageTitle>MatplotLib - Definite integral</PageTitle>

<h1>MatplotLib Demo - Definite integral</h1>

<div class="row">
    <div class="col-md-5">

        <br />

        <h4>Information about the plot shown below</h4>
        <p>
            This demo shows a Definite integral. It shows both a graph showing a polynomial and also the calculated area of the definite integral between limits a and b.
            <br />
            Some examples of plots to use listed below, use np (NumPy) for trigonometric functions
            <ul>
                <li>np.sin(x)+10</li>
                <li>x*x</li>
                <li>(x - 3) * (x - 5) * (x - 12) + 85</li>
            </ul>
        </p>

    </div>
</div>

<div class="col-md-4 d-flex align-items-center">
    <label id="lblFunction" class="col-form-label me-3 fw-bold" for="tbFunction">Function expression</label>
    <InputText class="form-control" name="tbFunction" @bind-Value="@FunctionToPlot" @onkeyup="HandleKeyPress" />
</div>

<div class="col-md-2 d-flex align-items-center">
    <label id="lblStartValue" class="col-form-label me-3 fw-bold" for="tbStartValue">Start value</label>
    <InputNumber class="form-control col-md-2" name="tbStartValue" @bind-Value="@Lowerbound" @onkeyup="HandleKeyPress" />

    <label id="lblEndValue" class="col-form-label me-3 fw-bold" for="tbEndValue">End value</label>
    <InputNumber class="form-control col-sm-2" name="tbEndValue" @bind-Value="@Upperbound" @onkeyup="HandleKeyPress" />
</div>

<div class="row">
    <button class="btn col-md-1 mt-4 btn-outline-primary" onclick="(async () => await @DrawIntegrationPlot())">Draw plot</button>
</div>

@if (generatedMatPlotImage != null && !isLoadingMatPlotImage)
{
    <img src="@generatedMatPlotImage" id="plotDefiniteIntegral" class="plotImage" alt="Generated image from Matplotlib" />
}

@code {

    private static string? generatedMatPlotImage;

    private static bool isLoadingMatPlotImage;

    private static DateTime? LastUpdate = null;

    private string FunctionToPlot = "(x - 3) * (x - 5) * (x - 12) + 85";

    private int Lowerbound = 2;

    private int Upperbound = 8;

    protected override async Task OnParametersSetAsync()
    {
        await DrawIntegrationPlot();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await DrawIntegrationPlot();
        }
    }

    private async Task DrawIntegrationPlot()
    {
        var elapsedTimeSinceLastImage = DateTime.Now.Subtract(LastUpdate.HasValue ?
           LastUpdate.Value : DateTime.Now.AddMinutes(-1)).TotalMilliseconds;

        if (elapsedTimeSinceLastImage < 500)
        {
            Console.WriteLine("MatplotLib loading : refusing to load quicker than once per second");
            return; //HACK : do not render quicker than once per second to avoid double calls. TODO : Fix up this mess to avoid double renderings
        }

        LastUpdate = DateTime.Now;

        Console.WriteLine();

        try
        {
            if (!isLoadingMatPlotImage)
            {
                isLoadingMatPlotImage = true;

                generatedMatPlotImage = await MatplotPlotImageService.GenerateDefiniteIntegral(FunctionToPlot, Lowerbound, Upperbound);
            }
            isLoadingMatPlotImage = false;
        }
        catch (Exception err)
        {
            Console.WriteLine(err.ToString());
            isLoadingMatPlotImage = false;
        }

    }

}

@* <script>
    document.querySelectorAll('img.PlotImage').forEach(img => {
    img.onload = () => {
    console.log('Image loaded:', img.src);
    img.classList.add('loaded');
    };
    });
</script> *@
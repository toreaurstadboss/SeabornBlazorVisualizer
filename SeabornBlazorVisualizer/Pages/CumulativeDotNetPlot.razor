@page "/cumulativedotnetplot"

@using SeabornBlazorVisualizer.Data
@inject MatplotPlotImageService MatplotPlotImageService

<PageTitle>MatplotLib - Cumulative graph showing provided data from .NET</PageTitle>

<h1>MatplotLib Demo - Cumulative graph showing provided data from .NET</h1>

<div class="col-md-5">

    <blockquote>
        <p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.</p>
        <p>It is widely used in data science and machine learning for data visualization.</p>
        <p>To read more information about Matplotlib, check the Info panel shown below and click the Show Info button.</p>
    </blockquote>

    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        Show Info
    </button>

    <br />

    <div class="collapse" id="collapseExample">
        <div class="card card-body">
            This demo displays a Cumulative graph showing randomized data using MatPlotLib. This demo
            uses a Anaconda 3 Python backend to generate the plots. The Demo itself is a Blazor server app
            that makes use of Python.net library to interop with Python from .NET.
            Setting up the right version for Anaconda takes time to find, so this repo includes a Anaconda3_Pip_List.txt file
            showing the version of libs where the generation of Matplot plots works. Python 3.10 is used together with Anaconda
            and these libraries are central:

            <ul>
                <li>pythonnet</li>
                <li>matplotlib and mathplotlib.pyplot</li>
                <li>numpy</li>
                <li>pandas</li>
                <li>scipy</li>
                <li>Built in 'os' module of Python stdlibs</li>
                <li>TODO: make the Demo also work with library : seaborn . This lib are considered by many as a bit more visually appealing than than MatPlotLib. It is built upon MatplotLib.</li>
            </ul>
        </div>
    </div>

    <br />

    <h4>Information about the plot shown below</h4>
    <p>
        This demo shows a Cumulative graph showing provided data from .NET using MatPlotLib. This demo
        uses a Anaconda 3 Python backend to generate the plots. The Demo itself is a Blazor server app
        that makes use of Python.net library to interop with Python from .NET.

        The cumulative graph is generated using Python.NET and Numpy.The data is sent to the target .NET service method,
        which will then use Python.Net and libs Matplotlib, Numpy (and more) to generate the plot and save the plot to an image, which is then displayed in this app.
    </p>

</div>

@if (generatedMatPlotImage != null && !isLoadingMatPlotImage)
{
    <img src="@generatedMatPlotImage" id="plotImageCumulativePlot" class="plotImage" alt="Generated image from Matplotlib" />
}

@code {

    private static string? generatedMatPlotImage;

    private static bool isLoadingMatPlotImage;

    private static DateTime? LastUpdate = null;

    // Generate an array of 1000 random normal samples and then calculate the cumulative sum of those samples and return
    // the resulting list of these cumulative sums
    private List<double> CreateCumulativeSumArrayFromNormalSamples(){

        var normalSamples = NumericExtensions.GeneratedStandardNormalSamples(count: 1000);
        return normalSamples.CumulativeSum().ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        var elapsedTimeSinceLastImage = DateTime.Now.Subtract(LastUpdate.HasValue ?
            LastUpdate.Value : DateTime.Now.AddMinutes(-1)).TotalMilliseconds;

        if (elapsedTimeSinceLastImage < 500)
        {
            Console.WriteLine("MatplotLib loading : refusing to load quicker than once per second");
            return; //HACK : do not render quicker than once per second to avoid double calls. TODO : Fix up this mess to avoid double renderings
        }

        LastUpdate = DateTime.Now;

        Console.WriteLine();

        try
        {
            if (!isLoadingMatPlotImage)
            {
                isLoadingMatPlotImage = true;

                generatedMatPlotImage = await MatplotPlotImageService.GeneratedCumulativeGraphFromValues(CreateCumulativeSumArrayFromNormalSamples());
            }
            isLoadingMatPlotImage = false;
        }
        catch (Exception err)
        {
            Console.WriteLine(err.ToString());
            isLoadingMatPlotImage = false;
        }

    }

}

        
@* <script>
    document.querySelectorAll('img.PlotImage').forEach(img => {
    img.onload = () => {
    console.log('Image loaded:', img.src);
    img.classList.add('loaded');
    };
    });
</script> *@